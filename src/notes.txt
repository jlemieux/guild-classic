interceptor adds tokens/modifies requests as it comes through. module level

guards say whether or not you can access this page ( if {!!authService.user} )

services handle data endpoints/observables. they store data in private. public subject for onChanged

componenents interested in the data sub to onChanged, as well as .getData() to get initally, prechanged values

resolvers wait for an observable response before loading component. i.e. wait for recipes.fetch() to resolve, then load the page



services hit backend with obs req (this.http.post). You supply return type of body (or observe request instead). Then,
	pipe() and then catchError(this.handleError). Then tap() service needs (store objects, delete them). then let pass.
	subscribe in component if needed, otherwise in service.


if it doesnt have a default value initialized, type it. if its an array or object, type it.


API:

GET	'/guilds'				=> all guilds
GET	'/guilds?hasUser=jimmy'			=> all guilds that the user has a character in
GET	'/guilds/slug'				=> a specific guild
POST	'/guilds'				=> create new guild
PUT	'/guilds/slug'				=> update guild
DELETE	'/guilds/slug'				=> delete a guild
POST	Gunna have to research discord like links for joining a guild


GET	'/teams?guild=dream'
GET	'/teams/slug'


GET	'/guilds/slug/teams'		=> all raid teams for a specific guild
GET	'/guilds/slug/teams/slug'	=> a specific raid team for a specific guild



GET	'/characters'			=> all characters
GET	'/characters?owner=jimmy'	=> All characters owned by that user
GET	'/characters?guild=dream'	=> All characters in that guild
GET	'/characters/slug'		=> a specific character
POST	'/characters'			=> create a new character
PUT	'/characters/slug'		=> update a character
DELETE	'/characters/slug'		=> delete a character


